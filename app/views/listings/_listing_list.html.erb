<div id="listing-list-section">
    <div class="listing-list">
        <%= render @listings %>
    </div>
    <%= will_paginate @listings %>
</div>


<script type="text/javascript">
        
    // Asynchronously Load the map API 
    jQuery(function($) {
        if (document.getElementById('google-maps-script') == null){
            var script  = document.createElement('script');
            script.id   = "google-maps-script";
            script.src  = "http://maps.googleapis.com/maps/api/js?sensor=false&callback=initMap";
            document.body.appendChild(script);

            // https://maps.googleapis.com/maps/api/js?key=AIzaSyBQBGkwjqBPTsV01eg3eig8-Om33XLzIm8&callback=initMap
        }
    });

    // Reference http://wrightshq.com/playground/placing-multiple-markers-on-a-google-map-using-api-3/
    function initMap() {

        // Info window content
        var markers             = JSON.parse('<%= raw @listings.to_json(view: 'marker') %>');
        var infoWindowContent   = JSON.parse('<%= raw @listings.as_json(view: 'info_window') %>');

        // console.log(infoWindowContent);

        var map;
        var bounds = new google.maps.LatLngBounds();
        var mapOptions = { mapTypeId: 'roadmap' };

        // Display a map on the page
        map = new google.maps.Map(document.getElementById('listings-map'), mapOptions);

        // Display multiple markers on a map
        var infoWindow = new google.maps.InfoWindow(), marker, i;
        
        // Loop through our array of markers & place each one on the map  
        for( i = 0; i < markers.length; i++ ) {
            var position = new google.maps.LatLng(markers[i].lat, markers[i].lon);

            bounds.extend(position);
            marker = new google.maps.Marker({
                position:   position,
                map:        map,
                title:      markers[i].name
            });
            

            // Automatically center the map fitting all markers on the screen
            map.fitBounds(bounds);
            
            // Allow each marker to have an info window    
            google.maps.event.addListener(marker, 'click', (function(marker, i) {
                return function() {
                    infoWindow.setContent(infoWindowContent[i][0]);
                    infoWindow.open(map, marker);
                }
            })(marker, i));


        }

        // Override our map zoom level once our fitBounds function runs (Make sure it only runs once)
        var boundsListener = google.maps.event.addListener((map), 'bounds_changed', function(event) {
            google.maps.event.removeListener(boundsListener);
        });


    }
</script>